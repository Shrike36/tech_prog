# Generate constants for your localized strings.
#   Be sure that SwiftGen only parses ONE locale (typically Base.lproj, or en.lproj, or whichever your development region is); otherwise it will generate the same keys multiple times.
#   SwiftGen will parse all `.strings` files found in that folder.
 strings:
   inputs:
     - WeatherHub/Common/Resources/Strings/en.lproj
   outputs:
     - templateName: structured-swift5
       output: WeatherHub/Common/Resources/Constants/Strings.swift


# Generate constants for your Assets Catalogs, including constants for images, colors, ARKit resources, etc.
#   This example also shows how to provide additional parameters to your template to customize the output.
#   - Especially the `forceProvidesNamespaces: true` param forces to create sub-namespace for each folder/group used in your Asset Catalogs, even the ones without "Provides Namespace". Without this param, SwiftGen only generates sub-namespaces for folders/groups which have the "Provides Namespace" box checked in the Inspector pane.
#   - To know which params are supported for a template, use `swiftgen template doc xcassets swift5` to open the template documentation on GitHub.
 xcassets:
   inputs:
     - WeatherHub/Common/Resources/Images/Assets.xcassets
     - WeatherHub/Common/Resources/Colors/Colors.xcassets
   outputs:
     - templateName: swift5
       output: WeatherHub/Common/Resources/Constants/Assets.swift
       params:
          enumName: Asset
